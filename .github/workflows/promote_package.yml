name: Promote Python Package

# on:
#   workflow_dispatch:
#     inputs:
#       package_version:
#         description: 'Package version to promote (e.g., 0.0.1)'
#         required: true
#         type: string

on:
  repository_dispatch:
    types: [package-synchronized]

env:
  CLOUDSMITH_NAMESPACE: ${{ vars.CLOUDSMITH_NAMESPACE }}
  CLOUDSMITH_STAGING_REPO: ' gaurav-repo'
  CLOUDSMITH_PRODUCTION_REPO: 'production'
  CLOUDSMITH_SERVICE_SLUG: ${{ vars.CLOUDSMITH_SERVICE_SLUG }}
  PACKAGE_NAME: 'example_package'

permissions:
  id-token: write

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
      - name: Install Cloudsmith CLI
        uses: cloudsmith-io/cloudsmith-cli-action@v1.0.1
        with:
          oidc-namespace: ${{ env.CLOUDSMITH_NAMESPACE }}
          oidc-service-slug: ${{ env.CLOUDSMITH_SERVICE_SLUG }}

      # - name: Get package identifier and promote
      #   run: |
      #     # Query for the package and get its identifier
      #     PACKAGE_QUERY="filename:${PACKAGE_NAME}-${{ github.event.inputs.package_version }}.tar.gz"
      #     echo "Searching for package with query: $PACKAGE_QUERY"
          
      #     PACKAGE_DATA=$(cloudsmith list package ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} -q "$PACKAGE_QUERY" -F json)
          
      #     # Extract the identifier_perm using jq
      #     IDENTIFIER=$(echo "$PACKAGE_DATA" | jq -r '.data[0].identifier_perm')
          
      #     if [ -z "$IDENTIFIER" ] || [ "$IDENTIFIER" = "null" ]; then
      #       echo "Failed to find package identifier"
      #       exit 1
      #     fi
          
      #     echo "Found package identifier: $IDENTIFIER"
          
      #     # Promote package using the identifier
      #     cloudsmith mv --yes \
      #       ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER \
      #       ${{ env.CLOUDSMITH_PRODUCTION_REPO }}
      #   shell: bash

      - name: Extract package information from webhook
        id: extract_info
        run: |
          echo "Webhook payload received:"
          echo '${{ toJson(github.event.client_payload) }}'
          
          # Extract package information from the webhook payload
          PACKAGE_IDENTIFIER="${{ github.event.client_payload.identifier }}"
          PACKAGE_VERSION="${{ github.event.client_payload.version }}"
          PACKAGE_FILENAME="${{ github.event.client_payload.filename }}"
          
          echo "Package Identifier: $PACKAGE_IDENTIFIER"
          echo "Package Version: $PACKAGE_VERSION"
          echo "Package Filename: $PACKAGE_FILENAME"
          
          # Set outputs for use in subsequent steps
          echo "identifier=$PACKAGE_IDENTIFIER" >> $GITHUB_OUTPUT
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "filename=$PACKAGE_FILENAME" >> $GITHUB_OUTPUT

      - name: Tag package as ready-for-production
        run: |
          echo "Tagging package with ready-for-production tag"
          
          # Tag the package in the staging repository
          cloudsmith tag add \
            ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/${{ steps.extract_info.outputs.identifier }} \
            ready-for-production
          
          echo "Package tagged successfully"

      - name: Get packages tagged with ready-for-production and promote
        run: |
          # Query for packages tagged with ready-for-production
          PACKAGE_QUERY="tag:ready-for-production"
          echo "Searching for packages with query: $PACKAGE_QUERY"
          
          PACKAGE_DATA=$(cloudsmith list package ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} -q "$PACKAGE_QUERY" -F json)
          
          echo "Package data retrieved:"
          echo "$PACKAGE_DATA" | jq '.'
          
          # Extract all identifiers for packages tagged with ready-for-production
          IDENTIFIERS=$(echo "$PACKAGE_DATA" | jq -r '.data[].identifier_perm')
          
          if [ -z "$IDENTIFIERS" ]; then
            echo "No packages found with ready-for-production tag"
            exit 0
          fi
          
          echo "Found packages with ready-for-production tag:"
          echo "$IDENTIFIERS"
          
          # Promote each package tagged with ready-for-production
          for IDENTIFIER in $IDENTIFIERS; do
            echo "Promoting package with identifier: $IDENTIFIER"
            
            cloudsmith mv --yes \
              ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER \
              ${{ env.CLOUDSMITH_PRODUCTION_REPO }}
            
            echo "Successfully promoted package: $IDENTIFIER"
          done
        shell: bash
